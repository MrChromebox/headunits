---
interface Props {
    from: string;
    to?: string;
}

const { from, to } = Astro.props;

const UNITS: Partial<Record<Intl.RelativeTimeFormatUnit, number>> = {
    year  : 24 * 60 * 60 * 1000 * 365,
    month : 24 * 60 * 60 * 1000 * 365/12,
    day   : 24 * 60 * 60 * 1000,
    hour  : 60 * 60 * 1000,
    minute: 60 * 1000,
    second: 1000
};

const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });

const calculate = (from: string, to?: string) => {
    const dateFrom = new Date(from);
    const dateTo = to ? new Date(to) : new Date();
    const elapsed = dateFrom - dateTo;

    for (let u in UNITS) {
        if (Math.abs(elapsed) > UNITS[u] || u === 'second') {
            return rtf.format(Math.round(elapsed / UNITS[u]), u as Intl.RelativeTimeFormatUnit);
        }
    }
}

const value = calculate(from, to);
---
<Fragment set:text={value} />

---
import { slug } from 'github-slugger';
import type { SettingItem } from "./collection";

interface Props {
    section: string;
    setting: SettingItem;
    parent?: string;
}

const { section, setting, parent } = Astro.props;

const uniqueId = slug([section, parent, setting.name].filter(x => x).join(' '));
const parentId = parent ? slug([section, parent].filter(x => x).join(' ')) : undefined;

let configXmlRef = undefined;

if (typeof setting.configValue !== "undefined") {
    configXmlRef = `Value for the setting above in factory_config.xml should be "${setting.configValue}"`;
} else if (setting.configKey) {
    configXmlRef = `This setting can be found and set in factory_config.xml file with key "${setting.configKey}"`;

    if (setting.control === 'checkbox' && !setting.children) {
        configXmlRef += `\n\nAdditionally, the values will be most likely "0" or "1" to indicate disabled/enabled state.`;
    }
}
---
<div>
    <div class="flex items-center space-x-2">
        {setting.control === 'checkbox' && (
            <input
                type="checkbox"
                id={uniqueId}
                name={uniqueId}
                disabled="disabled"
                class="rounded w-4 h-4 border-gray-300 text-indigo-600 focus:ring-indigo-500"
            >
        )}

        {setting.control === 'radio' && (
            <input
                type="radio"
                id={uniqueId}
                name={parentId}
                disabled="disabled"
                class="w-4 h-4 border-gray-300 text-indigo-600 focus:ring-indigo-500"
            >
        )}

        {setting.control ? (
            <label for={uniqueId}>{setting.name}</label>
        ) : (
            <span id={uniqueId}>{setting.name}</span>
        )}

        {setting.max && (
            <input
                type="range"
                id={uniqueId}
                name={uniqueId}
                min={setting.min}
                max={setting.max}
                disabled="disabled"
                class="h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer dark:bg-gray-700"
            >
            <span>({setting.min} - {setting.max})</span>
        )}

        {configXmlRef && (
            <span class="flex items-center text-xs mt-0.5text-gray-600 dark:text-gray-400" title={configXmlRef}>
                &lpar;
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3 mt-0.5 mr-1 inline">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 6.75 22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3-4.5 16.5" />
                </svg>
                <code class="not-prose mt-0.5">{setting.configKey || setting.configValue}</code> &rpar;
            </span>
        )}
    </div>

    {setting.description && (
        <div
            class="mb-1 text-sm text-gray-600 dark:text-gray-400"
            class:list={{ 'ml-6': setting.control === 'checkbox' || setting.control === 'radio' }}
        >
            {setting.description}
        </div>
    )}

    {setting.children?.map(child => (
        <Astro.self section={section} setting={child} parent={setting.name}></Astro.self>
    ))}
</div>
